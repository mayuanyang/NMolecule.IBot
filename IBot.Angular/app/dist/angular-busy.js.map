{"version":3,"names":[],"mappings":"","sources":["angular-busy.js"],"sourcesContent":["angular.module('cgBusy',[]);\r\n\r\n//loosely modeled after angular-promise-tracker\r\nangular.module('cgBusy').factory('_cgBusyTrackerFactory',['$timeout','$q',function($timeout,$q){\r\n\r\n    return function(){\r\n\r\n        var tracker = {};\r\n        tracker.promises = [];\r\n        tracker.delayPromise = null;\r\n        tracker.durationPromise = null;\r\n        tracker.delayJustFinished = false;\r\n\r\n        tracker.reset = function(options){\r\n            tracker.minDuration = options.minDuration;\r\n\r\n            tracker.promises = [];\r\n            angular.forEach(options.promises,function(p){\r\n                if (!p || p.$cgBusyFulfilled) {\r\n                    return;\r\n                }\r\n                addPromiseLikeThing(p);\r\n            });\r\n\r\n            if (tracker.promises.length === 0) {\r\n                //if we have no promises then dont do the delay or duration stuff\r\n                return;\r\n            }\r\n\r\n            tracker.delayJustFinished = false;\r\n            if (options.delay) {\r\n                tracker.delayPromise = $timeout(function(){\r\n                    tracker.delayPromise = null;\r\n                    tracker.delayJustFinished = true;\r\n                },parseInt(options.delay,10));\r\n            }\r\n            if (options.minDuration) {\r\n                tracker.durationPromise = $timeout(function(){\r\n                    tracker.durationPromise = null;\r\n                },parseInt(options.minDuration,10) + (options.delay ? parseInt(options.delay,10) : 0));\r\n            }            \r\n        };\r\n\r\n        tracker.isPromise = function(promiseThing){\r\n            var then = promiseThing && (promiseThing.then || promiseThing.$then ||\r\n                (promiseThing.$promise && promiseThing.$promise.then));\r\n\r\n            return typeof then !== 'undefined';            \r\n        };\r\n\r\n        tracker.callThen = function(promiseThing,success,error){\r\n            var promise;\r\n            if (promiseThing.then || promiseThing.$then){\r\n                promise = promiseThing;\r\n            } else if (promiseThing.$promise){\r\n                promise = promiseThing.$promise;\r\n            } else if (promiseThing.denodeify){\r\n                promise = $q.when(promiseThing);\r\n            }\r\n                       \r\n            var then = (promise.then || promise.$then);\r\n\r\n            then.call(promise,success,error);\r\n        };\r\n\r\n        var addPromiseLikeThing = function(promise){\r\n\r\n            if (!tracker.isPromise(promise)) {\r\n                throw new Error('cgBusy expects a promise (or something that has a .promise or .$promise');\r\n            }\r\n\r\n            if (tracker.promises.indexOf(promise) !== -1){\r\n                return;\r\n            }\r\n            tracker.promises.push(promise);\r\n\r\n            tracker.callThen(promise, function(){\r\n                promise.$cgBusyFulfilled = true;\r\n                if (tracker.promises.indexOf(promise) === -1) {\r\n                    return;\r\n                }\r\n                tracker.promises.splice(tracker.promises.indexOf(promise),1);\r\n            },function(){\r\n                promise.$cgBusyFulfilled = true;\r\n                if (tracker.promises.indexOf(promise) === -1) {\r\n                    return;\r\n                }\r\n                tracker.promises.splice(tracker.promises.indexOf(promise),1);\r\n            });\r\n        };\r\n\r\n        tracker.active = function(){\r\n            if (tracker.delayPromise){\r\n                return false;\r\n            }\r\n\r\n            if (!tracker.delayJustFinished){\r\n                if (tracker.durationPromise){\r\n                    return true;\r\n                }\r\n                return tracker.promises.length > 0;\r\n            } else {\r\n                //if both delay and min duration are set, \r\n                //we don't want to initiate the min duration if the \r\n                //promise finished before the delay was complete\r\n                tracker.delayJustFinished = false;\r\n                if (tracker.promises.length === 0) {\r\n                    tracker.durationPromise = null;\r\n                }\r\n                return tracker.promises.length > 0;\r\n            }\r\n        };\r\n\r\n        return tracker;\r\n\r\n    };\r\n}]);\r\n\r\nangular.module('cgBusy').value('cgBusyDefaults',{});\r\n\r\nangular.module('cgBusy').directive('cgBusy',['$compile','$templateCache','cgBusyDefaults','$http','_cgBusyTrackerFactory',\r\n    function($compile,$templateCache,cgBusyDefaults,$http,_cgBusyTrackerFactory){\r\n        return {\r\n            restrict: 'A',\r\n            link: function(scope, element, attrs, fn) {\r\n\r\n                //Apply position:relative to parent element if necessary\r\n                var position = element.css('position');\r\n                if (position === 'static' || position === '' || typeof position === 'undefined'){\r\n                    element.css('position','relative');\r\n                }\r\n\r\n                var templateElement;\r\n                var backdropElement;\r\n                var currentTemplate;\r\n                var templateScope;\r\n                var backdrop;\r\n                var tracker = _cgBusyTrackerFactory();\r\n\r\n                var defaults = {\r\n                    templateUrl: 'angular-busy.html',\r\n                    delay:0,\r\n                    minDuration:0,\r\n                    backdrop: true,\r\n                    message:'Please Wait...',\r\n                    wrapperClass: 'cg-busy cg-busy-animation'\r\n                };\r\n\r\n                angular.extend(defaults,cgBusyDefaults);\r\n\r\n                scope.$watchCollection(attrs.cgBusy,function(options){\r\n\r\n                    if (!options) {\r\n                        options = {promise:null};\r\n                    }\r\n\r\n                    if (angular.isString(options)) {\r\n                        throw new Error('Invalid value for cg-busy. cgBusy no longer accepts string ids to represent promises/trackers.');\r\n                    }\r\n\r\n                    //is it an array (of promises) or one promise\r\n                    if (angular.isArray(options) || tracker.isPromise(options)) {\r\n                        options = {promise:options};\r\n                    }\r\n\r\n                    options = angular.extend(angular.copy(defaults),options);\r\n\r\n                    if (!options.templateUrl){\r\n                        options.templateUrl = defaults.templateUrl;\r\n                    }\r\n\r\n                    if (!angular.isArray(options.promise)){\r\n                        options.promise = [options.promise];\r\n                    }\r\n\r\n                    // options.promise = angular.isArray(options.promise) ? options.promise : [options.promise];\r\n                    // options.message = options.message ? options.message : 'Please Wait...';\r\n                    // options.template = options.template ? options.template : cgBusyTemplateName;\r\n                    // options.minDuration = options.minDuration ? options.minDuration : 0;\r\n                    // options.delay = options.delay ? options.delay : 0;\r\n\r\n                    if (!templateScope) {\r\n                        templateScope = scope.$new();\r\n                    }\r\n\r\n                    templateScope.$message = options.message;\r\n\r\n                    if (!angular.equals(tracker.promises,options.promise)) {\r\n                        tracker.reset({\r\n                            promises:options.promise,\r\n                            delay:options.delay,\r\n                            minDuration: options.minDuration\r\n                        });\r\n                    }\r\n\r\n                    templateScope.$cgBusyIsActive = function() {\r\n                        return tracker.active();\r\n                    };\r\n\r\n\r\n                    if (!templateElement || currentTemplate !== options.templateUrl || backdrop !== options.backdrop) {\r\n\r\n                        if (templateElement) {\r\n                            templateElement.remove();\r\n                        }\r\n                        if (backdropElement){\r\n                            backdropElement.remove();\r\n                        }\r\n\r\n                        currentTemplate = options.templateUrl;\r\n                        backdrop = options.backdrop;\r\n\r\n                        $http.get(currentTemplate,{cache: $templateCache}).success(function(indicatorTemplate){\r\n\r\n                            options.backdrop = typeof options.backdrop === 'undefined' ? true : options.backdrop;\r\n\r\n                            if (options.backdrop){\r\n                                var backdrop = '<div class=\"cg-busy cg-busy-backdrop cg-busy-backdrop-animation ng-hide\" ng-show=\"$cgBusyIsActive()\"></div>';\r\n                                backdropElement = $compile(backdrop)(templateScope);\r\n                                element.append(backdropElement);\r\n                            }\r\n\r\n                            var template = '<div class=\"'+options.wrapperClass+' ng-hide\" ng-show=\"$cgBusyIsActive()\">' + indicatorTemplate + '</div>';\r\n                            templateElement = $compile(template)(templateScope);\r\n\r\n                            angular.element(templateElement.children()[0])\r\n                                .css('position','absolute')\r\n                                .css('top',0)\r\n                                .css('left',0)\r\n                                .css('right',0)\r\n                                .css('bottom',0);\r\n                            element.append(templateElement);\r\n\r\n                        }).error(function(data){\r\n                            throw new Error('Template specified for cgBusy ('+options.templateUrl+') could not be loaded. ' + data);\r\n                        });\r\n                    }\r\n\r\n                },true);\r\n            }\r\n        };\r\n    }\r\n]);\r\n\r\n\r\nangular.module('cgBusy').run(['$templateCache', function($templateCache) {\r\n  'use strict';\r\n\r\n  $templateCache.put('angular-busy.html',\r\n    \"<div class=\\\"cg-busy-default-wrapper\\\">\\n\" +\r\n    \"\\n\" +\r\n    \"   <div class=\\\"cg-busy-default-sign\\\">\\n\" +\r\n    \"\\n\" +\r\n    \"      <div class=\\\"cg-busy-default-spinner\\\">\\n\" +\r\n    \"         <div class=\\\"bar1\\\"></div>\\n\" +\r\n    \"         <div class=\\\"bar2\\\"></div>\\n\" +\r\n    \"         <div class=\\\"bar3\\\"></div>\\n\" +\r\n    \"         <div class=\\\"bar4\\\"></div>\\n\" +\r\n    \"         <div class=\\\"bar5\\\"></div>\\n\" +\r\n    \"         <div class=\\\"bar6\\\"></div>\\n\" +\r\n    \"         <div class=\\\"bar7\\\"></div>\\n\" +\r\n    \"         <div class=\\\"bar8\\\"></div>\\n\" +\r\n    \"         <div class=\\\"bar9\\\"></div>\\n\" +\r\n    \"         <div class=\\\"bar10\\\"></div>\\n\" +\r\n    \"         <div class=\\\"bar11\\\"></div>\\n\" +\r\n    \"         <div class=\\\"bar12\\\"></div>\\n\" +\r\n    \"      </div>\\n\" +\r\n    \"\\n\" +\r\n    \"      <div class=\\\"cg-busy-default-text\\\">{{$message}}</div>\\n\" +\r\n    \"\\n\" +\r\n    \"   </div>\\n\" +\r\n    \"\\n\" +\r\n    \"</div>\"\r\n  );\r\n\r\n}]);\r\n"],"file":"angular-busy.js","sourceRoot":"/source/"}