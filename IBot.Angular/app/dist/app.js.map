{"version":3,"names":[],"mappings":"","sources":["app.js"],"sourcesContent":["// Angular itself is load from index.html\r\n\r\nimport traceur from './traceur-runtime';\r\nimport router from './angular-ui-router';\r\nimport angularBusy from './angular-busy';\r\nimport angularScroll from './angular-scroll';\r\nimport httpService from './httpService';\r\nimport guidFactory from './guidFactory';\r\nimport angularToggleSwitch from './angular-toggle-switch'; \r\nimport chart from './chart.js'; \r\nimport angularchart from './angular-chart.js';\r\nimport uiboot from './ui-bootstrap-tpls';\r\nimport homeLayoutController from './homeLayoutController';\r\n\r\n\r\nimport quotePartPinbanInfo from './quotePartPinbanInfo';\r\nimport dynamicTemplate from './dynamicTemplate';\r\n\r\nconsole.log(\"version: \" + angular.version.full);\r\nvar myApp = angular.module('myApp', ['ui.router', 'cgBusy', 'duScroll','quotePartPinbanInfoDirective', 'toggle-switch','chart.js','ui.bootstrap', 'dynamicTemplateDirective'])\r\n\t.controller('homeLayoutController', homeLayoutController)\r\n\t.factory('guidFactory', guidFactory.createFactory)\r\n\t.service('httpService', httpService);\r\n\r\nmyApp.config(['$stateProvider', '$urlRouterProvider','$httpProvider', function($stateProvider, $urlRouterProvider, $httpProvider) {\r\n\t// For any unmatched url, redirect to /state1\r\n\t$urlRouterProvider.otherwise(\"/\");\r\n\t\r\n\t// Use WithCredentials\r\n\t$httpProvider.defaults.withCredentials = true;\r\n\t\r\n\t// Now set up the states\r\n        $stateProvider\r\n            .state('home', {\r\n                url: \"/\",\r\n                templateUrl: \"views/shared/_homelayout.html\",\r\n                controller: \"homeLayoutController as model\"\r\n            });\r\n    }])\r\n\r\n.factory('httpInterceptor', ['$q', '$rootScope', '$injector', '$timeout',\r\n    function ($q, $rootScope, $injector, $timeout) {\r\n\t\tfunction completeBusy(result) {\r\n\t\t\tresult.config.busyDeferred.resolve();\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\tfunction removeItemFromErrorMessages(){\r\n\t\t\tif($rootScope.errorMessages != null && $rootScope.errorMessages.length > 0){\r\n\t\t\t\t$rootScope.errorMessages.pop();\r\n\t\t\t}\r\n\t\t}\r\n\t\tfunction clearServerErrors(){\r\n\t\t\t$rootScope.serverErrors = [];\r\n\t\t}\r\n\t\tfunction clearMessages(){\r\n\t\t\t$rootScope.errorMessages = [];\r\n\t\t}\r\n\t\t\r\n\t\tfunction addMessage(message) {\r\n\r\n\t\t\tif ($rootScope.errorMessages == null) {\r\n\t\t\t\t$rootScope.errorMessages = [];\r\n\t\t\t}\r\n\t\t\t$rootScope.errorMessages.splice(0, 0, message);\r\n\t\t}\r\n\t\t\r\n\t\treturn {\r\n\t\t\t'request': function(config) {\r\n\t\t\t    var deferred = $q.defer();\r\n\r\n\t\t\t    var accesstoken = localStorage.getItem('accessToken');\r\n \r\n\t\t\t    var authHeaders = {};\r\n\t\t\t    if (accesstoken) {\r\n\t\t\t        authHeaders.Authorization = 'Bearer ' + accesstoken;\r\n\t\t\t        config.headers['Authorization'] = 'Bearer ' + accesstoken;\r\n\t\t\t    }\r\n\t\t\t    //console.log(config);\r\n\t\t\t    //console.log(config.headers[0]);\r\n\t\t\t    \r\n\r\n\t\t\t\t$rootScope.myPromise = deferred.promise;\r\n\t\t\t\tconfig.busyDeferred = deferred;\r\n\t\t\t\treturn config || $q.when(config);\r\n\t\t\t},\r\n\r\n\t\t\t'response': function(response) {\r\n\t\t\t\tcompleteBusy(response);\r\n\t\t\t\treturn response || $q.when(response);\r\n\t\t\t},\r\n\t\t\t'requestError': function (rejection) {\r\n\t\t\t\tcompleteBusy(rejection);\r\n\t\t\t\treturn $q.reject(rejection);\r\n            },\r\n\t\t\t'responseError': function (rejection) {\r\n\t\t\t\tif (rejection.status === 401) {\r\n\t\t\t\t\taddMessage({\r\n\t\t\t\t\t\ttype: \"warning\",\r\n\t\t\t\t\t\tmessage: rejection.statusText + \", 你没有权限进行此操作\"\r\n\t\t\t\t\t});\r\n\t\t\t\t\t\r\n\r\n\t\t\t\t} else if (rejection.status >= 400 && rejection.status < 500 ) {\r\n\t\t\t\t\taddMessage({\r\n\t\t\t\t\t\ttype: \"warning\",\r\n\t\t\t\t\t\tmessage: rejection.data\r\n\t\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\t\tvar serverErrors = {}\r\n\t\t\t\t\tvar len = rejection.data.length;\r\n\t\t\t\t\tfor(var i = 0; i < len; i++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar error = rejection.data[i];\r\n\t\t\t\t\t\tserverErrors[error.location] = error.message;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t$rootScope.serverErrors = serverErrors;\r\n\t\t\t\t}\r\n\t\t\t\telse if (rejection.status >= 500 && rejection.status < 600) {\r\n\t\t\t\t\t\r\n\t\t\t\t\taddMessage({\r\n\t\t\t\t\t\ttype: \"danger\",\r\n\t\t\t\t\t\tmessage: rejection.data.exceptionMessage\r\n\t\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\t}else{\r\n\t\t\t\t\taddMessage({\r\n\t\t\t\t\t\ttype: \"danger\",\r\n\t\t\t\t\t\tmessage: \"Could not connect to the API, the server may be down or there may be an issue with your connection\"\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tcompleteBusy(rejection);\r\n\t\t\t\treturn $q.reject(rejection);\r\n            }\r\n\t\t};\r\n    }\r\n])\r\n\r\n.config(['$httpProvider', function ($httpProvider) {\r\n    $httpProvider.interceptors.push('httpInterceptor');\r\n}]);\r\n\r\n\r\n"],"file":"app.js","sourceRoot":"/source/"}