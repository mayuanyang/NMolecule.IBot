{"version":3,"names":[],"mappings":"","sources":["dynamicTemplate.js"],"sourcesContent":["import angular from 'angular';\r\nangular.module('dynamicTemplateDirective',[]).directive('dynamicTemplate', ['$compile', function($compile){\r\n    var directive = {};\r\n    directive.restrict = 'E';\r\n    directive.scope = { data: '=data', name: '@name' };\r\n\t\t\r\n\tdirective.link = function (scope, elm, attrs) {\r\n      \r\n      var field_inputs = \"\";\r\n\t  var myData = scope.data;\r\n\t  var headerName = scope.name;\r\n\t  console.log(headerName);\r\n\t  \t  var new_field ='';\r\n\t  var panelOpenTag = \" <div class='panel panel-primary' class='expandable'><div class='panel-heading'>\" + scope.name + \"</div><div class='panel-body'>\";\r\n\t  var panelCloseTag = \"</div></div></div>\";\r\n\t  \r\n\t  function walk(obj, isInner) {\r\n\t\t  for (var field in obj) {\r\n\t\t\t  if (obj.hasOwnProperty(field)) {\r\n\t\t\t\t  var val = obj[field];\r\n\t\t\t\t  if(Object.prototype.toString.call(obj[field]) === '[object Array]'){\r\n\t\t\t\t\t new_field += \"<div><strong><p class='text-capitalize'>\" + field + \"</p></strong></div>\"\r\n\t\t\t\t\t\t  var list = obj[field];\r\n\t\t\t\t\t\t  var tableHeader = \"<table class='table table-bordered'>\";\r\n\t\t\t\t\t\t  var tableFooter = \"</table>\";\r\n\t\t\t\t\t\t  var headerRowOpen = \"<tr>\";\r\n\t\t\t\t\t\t  var headerRowClose = \"</tr>\";\r\n\t\t\t\t\t\t  var headerContent =\"\";\r\n\t\t\t\t\t\t  var contentRow = \"\";\r\n\t\t\t\t\t\t  var rows = \"\";\r\n\t\t\t\t\t\t  \r\n\t\t\t\t\t\t  var loop = 0;\r\n\t\t\t\t\t\t  for(var item in list){\r\n\t\t\t\t\t\t\t  //headerContent += \"<th>\" + item + \"</th>\";\r\n\t\t\t\t\t\t\t  \r\n\t\t\t\t\t\t\t  if(Object.prototype.toString.call(list[item]) === '[object Object]'){\r\n\t\t\t\t\t\t\t\t  walk(list[item], true);\r\n\t\t\t\t\t\t\t\t  var objItem = list[item];\r\n\t\t\t\t\t\t\t\t  contentRow = \"<tr>\" + contentRow;\r\n\t\t\t\t\t\t\t\t  for(var f in objItem){\r\n\t\t\t\t\t\t\t\t\t  console.log(\"inner table \" + f);\r\n\t\t\t\t\t\t\t\t\t  if(loop === 0)\r\n\t\t\t\t\t\t\t\t\t\theaderContent += \"<th class='text-capitalize'>\" + f + \"</th>\";\r\n\t\t\t\t\t\t\t\t\t  contentRow +=  \"<td>\" + objItem[f] + \"</td>\";\t\r\n\t\t\t\t\t\t\t\t  }\r\n\t\t\t\t\t\t\t\t  contentRow = contentRow + \"</tr>\";\r\n\t\t\t\t\t\t\t  }\r\n\t\t\t\t\t\t\t  else{\r\n\t\t\t\t\t\t\t\t  headerContent = \"<th>Content</th>\"\r\n\t\t\t\t\t\t\t\t  contentRow += \"<tr><td>\" + list[item] + \"</td></tr>\";\t\t\t\t\t  \r\n\t\t\t\t\t\t\t  }\r\n\t\t\t\t\t\t\t  loop++;\r\n\t\t\t\t\t\t  } \r\n\t\t\t\t\t\t  //console.log(contentRow);\r\n\t\t\t\t\t\t  var table = tableHeader + headerRowOpen + headerContent + headerRowClose + contentRow + tableFooter;\r\n\t\t\t\t\t\t  //console.log(table);\r\n\t\t\t\t\t\t  new_field += table;\r\n\t\t\t\t\t\t  \r\n\t\t\t\t  }else if(Object.prototype.toString.call(obj[field]) === '[object Object]'){\r\n\t\t\t\t\t  //new_field = panelOpenTag + new_field;\r\n\t\t\t\t\t  walk(val, true);\r\n\t\t\t\t\t  //new_field = new_field + panelCloseTag;\r\n\t\t\t\t  }else{\r\n\t\t\t\t\t  if(isInner){\r\n\t\t\t\t\t\t  \r\n\t\t\t\t\t  }else{\r\n\t\t\t\t\t\t  new_field += \"<div><strong><p class='text-capitalize'>\" + field + \":</p></strong>\" + obj[field] + \"</div>\";\r\n\t\t\t\t\t  }\r\n\t\t\t\t\t  \r\n\t\t\t\t  }\r\n\t\t\t  \r\n\t\t\t}\r\n\t\t  }\r\n\t\t}\r\n\t\tnew_field = panelOpenTag + new_field;\r\n\t\twalk(myData, false);\r\n\t\tnew_field = new_field + panelCloseTag;\r\n\t  /*\r\n      for (var field in obj){\r\n\t\t  \r\n\t\t  if(obj.hasOwnProperty(field)){\r\n\t\t\t  var new_field ='';\r\n\t\t\t  \r\n\t\t\t  if(Object.prototype.toString.call(obj[field]) === '[object Array]'){\r\n\t\t\t\t  \r\n\t\t\t\t\t  console.log(field + obj[field]);\r\n\t\t\t\t\t  new_field += \"<div>\" + field + \"</div>\"\r\n\t\t\t\t\t  var list = obj[field];\r\n\t\t\t\t\t  for(var item in list){\r\n\t\t\t\t\t\t  new_field += \"<div>\" + list[item] + \"</div>\"\r\n\t\t\t\t\t  }\r\n\t\t\t\t\t  \t\t\t  \r\n\t\t\t\t  \r\n\t\t\t  }else{\r\n\t\t\t\t  console.log(Object.prototype.toString.call(obj[field]));\r\n\t\t\t\t  new_field = \"<div><span>\" + field +\"</span>: <span>\" + obj[field] + \"</span></div>\";\r\n\t\t\t\t  \r\n\t\t\t  }\r\n\t\t\t\r\n\t\t\tfield_inputs += new_field;  \r\n\t\t  }\r\n\t\t  \r\n\t\t\r\n        var new_field = \"\";\r\n        var field_type = schema[field].data_type == \"boolean\" ? \"checkbox\" : schema[field].data_type;\r\n\r\n        switch (field_type){\r\n          case 'file':\r\n            new_field = \"<div>\" + schema[field].display_name + \":<input type='file' ng-model='\" + field_type + \"' id='fileToUpload' class='file-field' /></div>\";\r\n            break;\r\n          default:\r\n            new_field = \"<div>\" + schema[field].display_name + \":<input type='\" + field_type + \"' ng-model='\" + field_type + \"'/></div>\";\r\n        }\r\n\r\n        field_inputs = field_inputs + new_field;\r\n\t\t*/\r\n      \r\n      elm.append($compile(new_field)(scope));\r\n    };\r\n\r\n    \r\n    return directive;\r\n}]);"],"file":"dynamicTemplate.js","sourceRoot":"/source/"}