{"version":3,"names":[],"mappings":"","sources":["angular-scroll.js"],"sourcesContent":["/**\r\n  * x is a value between 0 and 1, indicating where in the animation you are.\r\n  */\r\nvar duScrollDefaultEasing = function (x) {\r\n  'use strict';\r\n\r\n  if(x < 0.5) {\r\n    return Math.pow(x*2, 2)/2;\r\n  }\r\n  return 1-Math.pow((1-x)*2, 2)/2;\r\n};\r\n\r\nvar duScroll = angular.module('duScroll', [\r\n  'duScroll.scrollspy',\r\n  'duScroll.smoothScroll',\r\n  'duScroll.scrollContainer',\r\n  'duScroll.spyContext',\r\n  'duScroll.scrollHelpers'\r\n])\r\n  //Default animation duration for smoothScroll directive\r\n  .value('duScrollDuration', 350)\r\n  //Scrollspy debounce interval, set to 0 to disable\r\n  .value('duScrollSpyWait', 100)\r\n  //Wether or not multiple scrollspies can be active at once\r\n  .value('duScrollGreedy', false)\r\n  //Default offset for smoothScroll directive\r\n  .value('duScrollOffset', 0)\r\n  //Default easing function for scroll animation\r\n  .value('duScrollEasing', duScrollDefaultEasing)\r\n  //Which events on the container (such as body) should cancel scroll animations\r\n  .value('duScrollCancelOnEvents', 'scroll mousedown mousewheel touchmove keydown')\r\n  //Whether or not to activate the last scrollspy, when page/container bottom is reached\r\n  .value('duScrollBottomSpy', false)\r\n  //Active class name\r\n  .value('duScrollActiveClass', 'active');\r\n\r\nif (typeof module !== 'undefined' && module && module.exports) {\r\n  module.exports = duScroll;\r\n}\r\n\r\n\r\nangular.module('duScroll.scrollHelpers', ['duScroll.requestAnimation'])\r\n.run([\"$window\", \"$q\", \"cancelAnimation\", \"requestAnimation\", \"duScrollEasing\", \"duScrollDuration\", \"duScrollOffset\", \"duScrollCancelOnEvents\", function($window, $q, cancelAnimation, requestAnimation, duScrollEasing, duScrollDuration, duScrollOffset, duScrollCancelOnEvents) {\r\n  'use strict';\r\n\r\n  var proto = {};\r\n\r\n  var isDocument = function(el) {\r\n    return (typeof HTMLDocument !== 'undefined' && el instanceof HTMLDocument) || (el.nodeType && el.nodeType === el.DOCUMENT_NODE);\r\n  };\r\n\r\n  var isElement = function(el) {\r\n    return (typeof HTMLElement !== 'undefined' && el instanceof HTMLElement) || (el.nodeType && el.nodeType === el.ELEMENT_NODE);\r\n  };\r\n\r\n  var unwrap = function(el) {\r\n    return isElement(el) || isDocument(el) ? el : el[0];\r\n  };\r\n\r\n  proto.duScrollTo = function(left, top, duration, easing) {\r\n    var aliasFn;\r\n    if(angular.isElement(left)) {\r\n      aliasFn = this.duScrollToElement;\r\n    } else if(angular.isDefined(duration)) {\r\n      aliasFn = this.duScrollToAnimated;\r\n    }\r\n    if(aliasFn) {\r\n      return aliasFn.apply(this, arguments);\r\n    }\r\n    var el = unwrap(this);\r\n    if(isDocument(el)) {\r\n      return $window.scrollTo(left, top);\r\n    }\r\n    el.scrollLeft = left;\r\n    el.scrollTop = top;\r\n  };\r\n\r\n  var scrollAnimation, deferred;\r\n  proto.duScrollToAnimated = function(left, top, duration, easing) {\r\n    if(duration && !easing) {\r\n      easing = duScrollEasing;\r\n    }\r\n    var startLeft = this.duScrollLeft(),\r\n        startTop = this.duScrollTop(),\r\n        deltaLeft = Math.round(left - startLeft),\r\n        deltaTop = Math.round(top - startTop);\r\n\r\n    var startTime = null, progress = 0;\r\n    var el = this;\r\n\r\n    var cancelScrollAnimation = function($event) {\r\n      if (!$event || (progress && $event.which > 0)) {\r\n        if(duScrollCancelOnEvents) {\r\n          el.unbind(duScrollCancelOnEvents, cancelScrollAnimation);\r\n        }\r\n        cancelAnimation(scrollAnimation);\r\n        deferred.reject();\r\n        scrollAnimation = null;\r\n      }\r\n    };\r\n\r\n    if(scrollAnimation) {\r\n      cancelScrollAnimation();\r\n    }\r\n    deferred = $q.defer();\r\n\r\n    if(duration === 0 || (!deltaLeft && !deltaTop)) {\r\n      if(duration === 0) {\r\n        el.duScrollTo(left, top);\r\n      }\r\n      deferred.resolve();\r\n      return deferred.promise;\r\n    }\r\n\r\n    var animationStep = function(timestamp) {\r\n      if (startTime === null) {\r\n        startTime = timestamp;\r\n      }\r\n\r\n      progress = timestamp - startTime;\r\n      var percent = (progress >= duration ? 1 : easing(progress/duration));\r\n\r\n      el.scrollTo(\r\n        startLeft + Math.ceil(deltaLeft * percent),\r\n        startTop + Math.ceil(deltaTop * percent)\r\n      );\r\n      if(percent < 1) {\r\n        scrollAnimation = requestAnimation(animationStep);\r\n      } else {\r\n        if(duScrollCancelOnEvents) {\r\n          el.unbind(duScrollCancelOnEvents, cancelScrollAnimation);\r\n        }\r\n        scrollAnimation = null;\r\n        deferred.resolve();\r\n      }\r\n    };\r\n\r\n    //Fix random mobile safari bug when scrolling to top by hitting status bar\r\n    el.duScrollTo(startLeft, startTop);\r\n\r\n    if(duScrollCancelOnEvents) {\r\n      el.bind(duScrollCancelOnEvents, cancelScrollAnimation);\r\n    }\r\n\r\n    scrollAnimation = requestAnimation(animationStep);\r\n    return deferred.promise;\r\n  };\r\n\r\n  proto.duScrollToElement = function(target, offset, duration, easing) {\r\n    var el = unwrap(this);\r\n    if(!angular.isNumber(offset) || isNaN(offset)) {\r\n      offset = duScrollOffset;\r\n    }\r\n    var top = this.duScrollTop() + unwrap(target).getBoundingClientRect().top - offset;\r\n    if(isElement(el)) {\r\n      top -= el.getBoundingClientRect().top;\r\n    }\r\n    return this.duScrollTo(0, top, duration, easing);\r\n  };\r\n\r\n  proto.duScrollLeft = function(value, duration, easing) {\r\n    if(angular.isNumber(value)) {\r\n      return this.duScrollTo(value, this.duScrollTop(), duration, easing);\r\n    }\r\n    var el = unwrap(this);\r\n    if(isDocument(el)) {\r\n      return $window.scrollX || document.documentElement.scrollLeft || document.body.scrollLeft;\r\n    }\r\n    return el.scrollLeft;\r\n  };\r\n  proto.duScrollTop = function(value, duration, easing) {\r\n    if(angular.isNumber(value)) {\r\n      return this.duScrollTo(this.duScrollLeft(), value, duration, easing);\r\n    }\r\n    var el = unwrap(this);\r\n    if(isDocument(el)) {\r\n      return $window.scrollY || document.documentElement.scrollTop || document.body.scrollTop;\r\n    }\r\n    return el.scrollTop;\r\n  };\r\n\r\n  proto.duScrollToElementAnimated = function(target, offset, duration, easing) {\r\n    return this.duScrollToElement(target, offset, duration || duScrollDuration, easing);\r\n  };\r\n\r\n  proto.duScrollTopAnimated = function(top, duration, easing) {\r\n    return this.duScrollTop(top, duration || duScrollDuration, easing);\r\n  };\r\n\r\n  proto.duScrollLeftAnimated = function(left, duration, easing) {\r\n    return this.duScrollLeft(left, duration || duScrollDuration, easing);\r\n  };\r\n\r\n  angular.forEach(proto, function(fn, key) {\r\n    angular.element.prototype[key] = fn;\r\n\r\n    //Remove prefix if not already claimed by jQuery / ui.utils\r\n    var unprefixed = key.replace(/^duScroll/, 'scroll');\r\n    if(angular.isUndefined(angular.element.prototype[unprefixed])) {\r\n      angular.element.prototype[unprefixed] = fn;\r\n    }\r\n  });\r\n\r\n}]);\r\n\r\n\r\n//Adapted from https://gist.github.com/paulirish/1579671\r\nangular.module('duScroll.polyfill', [])\r\n.factory('polyfill', [\"$window\", function($window) {\r\n  'use strict';\r\n\r\n  var vendors = ['webkit', 'moz', 'o', 'ms'];\r\n\r\n  return function(fnName, fallback) {\r\n    if($window[fnName]) {\r\n      return $window[fnName];\r\n    }\r\n    var suffix = fnName.substr(0, 1).toUpperCase() + fnName.substr(1);\r\n    for(var key, i = 0; i < vendors.length; i++) {\r\n      key = vendors[i]+suffix;\r\n      if($window[key]) {\r\n        return $window[key];\r\n      }\r\n    }\r\n    return fallback;\r\n  };\r\n}]);\r\n\r\nangular.module('duScroll.requestAnimation', ['duScroll.polyfill'])\r\n.factory('requestAnimation', [\"polyfill\", \"$timeout\", function(polyfill, $timeout) {\r\n  'use strict';\r\n\r\n  var lastTime = 0;\r\n  var fallback = function(callback, element) {\r\n    var currTime = new Date().getTime();\r\n    var timeToCall = Math.max(0, 16 - (currTime - lastTime));\r\n    var id = $timeout(function() { callback(currTime + timeToCall); },\r\n      timeToCall);\r\n    lastTime = currTime + timeToCall;\r\n    return id;\r\n  };\r\n\r\n  return polyfill('requestAnimationFrame', fallback);\r\n}])\r\n.factory('cancelAnimation', [\"polyfill\", \"$timeout\", function(polyfill, $timeout) {\r\n  'use strict';\r\n\r\n  var fallback = function(promise) {\r\n    $timeout.cancel(promise);\r\n  };\r\n\r\n  return polyfill('cancelAnimationFrame', fallback);\r\n}]);\r\n\r\n\r\nangular.module('duScroll.spyAPI', ['duScroll.scrollContainerAPI'])\r\n.factory('spyAPI', [\"$rootScope\", \"$timeout\", \"$window\", \"$document\", \"scrollContainerAPI\", \"duScrollGreedy\", \"duScrollSpyWait\", \"duScrollBottomSpy\", \"duScrollActiveClass\", function($rootScope, $timeout, $window, $document, scrollContainerAPI, duScrollGreedy, duScrollSpyWait, duScrollBottomSpy, duScrollActiveClass) {\r\n  'use strict';\r\n\r\n  var createScrollHandler = function(context) {\r\n    var timer = false, queued = false;\r\n    var handler = function() {\r\n      queued = false;\r\n      var container = context.container,\r\n          containerEl = container[0],\r\n          containerOffset = 0,\r\n          bottomReached;\r\n\r\n      if (typeof HTMLElement !== 'undefined' && containerEl instanceof HTMLElement || containerEl.nodeType && containerEl.nodeType === containerEl.ELEMENT_NODE) {\r\n        containerOffset = containerEl.getBoundingClientRect().top;\r\n        bottomReached = Math.round(containerEl.scrollTop + containerEl.clientHeight) >= containerEl.scrollHeight;\r\n      } else {\r\n        var documentScrollHeight = $document[0].body.scrollHeight || $document[0].documentElement.scrollHeight; // documentElement for IE11\r\n        bottomReached = Math.round($window.pageYOffset + $window.innerHeight) >= documentScrollHeight;\r\n      }\r\n      var compareProperty = (duScrollBottomSpy && bottomReached ? 'bottom' : 'top');\r\n\r\n      var i, currentlyActive, toBeActive, spies, spy, pos;\r\n      spies = context.spies;\r\n      currentlyActive = context.currentlyActive;\r\n      toBeActive = undefined;\r\n\r\n      for(i = 0; i < spies.length; i++) {\r\n        spy = spies[i];\r\n        pos = spy.getTargetPosition();\r\n        if (!pos) continue;\r\n\r\n        if((duScrollBottomSpy && bottomReached) || (pos.top + spy.offset - containerOffset < 20 && (duScrollGreedy || pos.top*-1 + containerOffset) < pos.height)) {\r\n          //Find the one closest the viewport top or the page bottom if it's reached\r\n          if(!toBeActive || toBeActive[compareProperty] < pos[compareProperty]) {\r\n            toBeActive = {\r\n              spy: spy\r\n            };\r\n            toBeActive[compareProperty] = pos[compareProperty];\r\n          }\r\n        }\r\n      }\r\n\r\n      if(toBeActive) {\r\n        toBeActive = toBeActive.spy;\r\n      }\r\n      if(currentlyActive === toBeActive || (duScrollGreedy && !toBeActive)) return;\r\n      if(currentlyActive) {\r\n        currentlyActive.$element.removeClass(duScrollActiveClass);\r\n        $rootScope.$broadcast(\r\n          'duScrollspy:becameInactive',\r\n          currentlyActive.$element,\r\n          angular.element(currentlyActive.getTargetElement())\r\n        );\r\n      }\r\n      if(toBeActive) {\r\n        toBeActive.$element.addClass(duScrollActiveClass);\r\n        $rootScope.$broadcast(\r\n          'duScrollspy:becameActive',\r\n          toBeActive.$element,\r\n          angular.element(toBeActive.getTargetElement())\r\n        );\r\n      }\r\n      context.currentlyActive = toBeActive;\r\n    };\r\n\r\n    if(!duScrollSpyWait) {\r\n      return handler;\r\n    }\r\n\r\n    //Debounce for potential performance savings\r\n    return function() {\r\n      if(!timer) {\r\n        handler();\r\n        timer = $timeout(function() {\r\n          timer = false;\r\n          if(queued) {\r\n            handler();\r\n          }\r\n        }, duScrollSpyWait, false);\r\n      } else {\r\n        queued = true;\r\n      }\r\n    };\r\n  };\r\n\r\n  var contexts = {};\r\n\r\n  var createContext = function($scope) {\r\n    var id = $scope.$id;\r\n    var context = {\r\n      spies: []\r\n    };\r\n\r\n    context.handler = createScrollHandler(context);\r\n    contexts[id] = context;\r\n\r\n    $scope.$on('$destroy', function() {\r\n      destroyContext($scope);\r\n    });\r\n\r\n    return id;\r\n  };\r\n\r\n  var destroyContext = function($scope) {\r\n    var id = $scope.$id;\r\n    var context = contexts[id], container = context.container;\r\n    if(container) {\r\n      container.off('scroll', context.handler);\r\n    }\r\n    delete contexts[id];\r\n  };\r\n\r\n  var defaultContextId = createContext($rootScope);\r\n\r\n  var getContextForScope = function(scope) {\r\n    if(contexts[scope.$id]) {\r\n      return contexts[scope.$id];\r\n    }\r\n    if(scope.$parent) {\r\n      return getContextForScope(scope.$parent);\r\n    }\r\n    return contexts[defaultContextId];\r\n  };\r\n\r\n  var getContextForSpy = function(spy) {\r\n    var context, contextId, scope = spy.$scope;\r\n    if(scope) {\r\n      return getContextForScope(scope);\r\n    }\r\n    //No scope, most likely destroyed\r\n    for(contextId in contexts) {\r\n      context = contexts[contextId];\r\n      if(context.spies.indexOf(spy) !== -1) {\r\n        return context;\r\n      }\r\n    }\r\n  };\r\n\r\n  var isElementInDocument = function(element) {\r\n    while (element.parentNode) {\r\n      element = element.parentNode;\r\n      if (element === document) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  };\r\n\r\n  var addSpy = function(spy) {\r\n    var context = getContextForSpy(spy);\r\n    if (!context) return;\r\n    context.spies.push(spy);\r\n    if (!context.container || !isElementInDocument(context.container)) {\r\n      if(context.container) {\r\n        context.container.off('scroll', context.handler);\r\n      }\r\n      context.container = scrollContainerAPI.getContainer(spy.$scope);\r\n      context.container.on('scroll', context.handler).triggerHandler('scroll');\r\n    }\r\n  };\r\n\r\n  var removeSpy = function(spy) {\r\n    var context = getContextForSpy(spy);\r\n    if(spy === context.currentlyActive) {\r\n      $rootScope.$broadcast('duScrollspy:becameInactive', context.currentlyActive.$element);\r\n      context.currentlyActive = null;\r\n    }\r\n    var i = context.spies.indexOf(spy);\r\n    if(i !== -1) {\r\n      context.spies.splice(i, 1);\r\n    }\r\n\t\tspy.$element = null;\r\n  };\r\n\r\n  return {\r\n    addSpy: addSpy,\r\n    removeSpy: removeSpy,\r\n    createContext: createContext,\r\n    destroyContext: destroyContext,\r\n    getContextForScope: getContextForScope\r\n  };\r\n}]);\r\n\r\n\r\nangular.module('duScroll.scrollContainerAPI', [])\r\n.factory('scrollContainerAPI', [\"$document\", function($document) {\r\n  'use strict';\r\n\r\n  var containers = {};\r\n\r\n  var setContainer = function(scope, element) {\r\n    var id = scope.$id;\r\n    containers[id] = element;\r\n    return id;\r\n  };\r\n\r\n  var getContainerId = function(scope) {\r\n    if(containers[scope.$id]) {\r\n      return scope.$id;\r\n    }\r\n    if(scope.$parent) {\r\n      return getContainerId(scope.$parent);\r\n    }\r\n    return;\r\n  };\r\n\r\n  var getContainer = function(scope) {\r\n    var id = getContainerId(scope);\r\n    return id ? containers[id] : $document;\r\n  };\r\n\r\n  var removeContainer = function(scope) {\r\n    var id = getContainerId(scope);\r\n    if(id) {\r\n      delete containers[id];\r\n    }\r\n  };\r\n\r\n  return {\r\n    getContainerId:   getContainerId,\r\n    getContainer:     getContainer,\r\n    setContainer:     setContainer,\r\n    removeContainer:  removeContainer\r\n  };\r\n}]);\r\n\r\n\r\nangular.module('duScroll.smoothScroll', ['duScroll.scrollHelpers', 'duScroll.scrollContainerAPI'])\r\n.directive('duSmoothScroll', [\"duScrollDuration\", \"duScrollOffset\", \"scrollContainerAPI\", function(duScrollDuration, duScrollOffset, scrollContainerAPI) {\r\n  'use strict';\r\n\r\n  return {\r\n    link : function($scope, $element, $attr) {\r\n      $element.on('click', function(e) {\r\n        if((!$attr.href || $attr.href.indexOf('#') === -1) && $attr.duSmoothScroll === '') return;\r\n\r\n        var id = $attr.href ? $attr.href.replace(/.*(?=#[^\\s]+$)/, '').substring(1) : $attr.duSmoothScroll;\r\n\r\n        var target = document.getElementById(id) || document.getElementsByName(id)[0];\r\n        if(!target || !target.getBoundingClientRect) return;\r\n\r\n        if (e.stopPropagation) e.stopPropagation();\r\n        if (e.preventDefault) e.preventDefault();\r\n\r\n        var offset    = $attr.offset ? parseInt($attr.offset, 10) : duScrollOffset;\r\n        var duration  = $attr.duration ? parseInt($attr.duration, 10) : duScrollDuration;\r\n        var container = scrollContainerAPI.getContainer($scope);\r\n\r\n        container.duScrollToElement(\r\n          angular.element(target),\r\n          isNaN(offset) ? 0 : offset,\r\n          isNaN(duration) ? 0 : duration\r\n        );\r\n      });\r\n    }\r\n  };\r\n}]);\r\n\r\n\r\nangular.module('duScroll.spyContext', ['duScroll.spyAPI'])\r\n.directive('duSpyContext', [\"spyAPI\", function(spyAPI) {\r\n  'use strict';\r\n\r\n  return {\r\n    restrict: 'A',\r\n    scope: true,\r\n    compile: function compile(tElement, tAttrs, transclude) {\r\n      return {\r\n        pre: function preLink($scope, iElement, iAttrs, controller) {\r\n          spyAPI.createContext($scope);\r\n        }\r\n      };\r\n    }\r\n  };\r\n}]);\r\n\r\n\r\nangular.module('duScroll.scrollContainer', ['duScroll.scrollContainerAPI'])\r\n.directive('duScrollContainer', [\"scrollContainerAPI\", function(scrollContainerAPI){\r\n  'use strict';\r\n\r\n  return {\r\n    restrict: 'A',\r\n    scope: true,\r\n    compile: function compile(tElement, tAttrs, transclude) {\r\n      return {\r\n        pre: function preLink($scope, iElement, iAttrs, controller) {\r\n          iAttrs.$observe('duScrollContainer', function(element) {\r\n            if(angular.isString(element)) {\r\n              element = document.getElementById(element);\r\n            }\r\n\r\n            element = (angular.isElement(element) ? angular.element(element) : iElement);\r\n            scrollContainerAPI.setContainer($scope, element);\r\n            $scope.$on('$destroy', function() {\r\n              scrollContainerAPI.removeContainer($scope);\r\n            });\r\n          });\r\n        }\r\n      };\r\n    }\r\n  };\r\n}]);\r\n\r\n\r\nangular.module('duScroll.scrollspy', ['duScroll.spyAPI'])\r\n.directive('duScrollspy', [\"spyAPI\", \"duScrollOffset\", \"$timeout\", \"$rootScope\", function(spyAPI, duScrollOffset, $timeout, $rootScope) {\r\n  'use strict';\r\n\r\n  var Spy = function(targetElementOrId, $scope, $element, offset) {\r\n    if(angular.isElement(targetElementOrId)) {\r\n      this.target = targetElementOrId;\r\n    } else if(angular.isString(targetElementOrId)) {\r\n      this.targetId = targetElementOrId;\r\n    }\r\n    this.$scope = $scope;\r\n    this.$element = $element;\r\n    this.offset = offset;\r\n  };\r\n\r\n  Spy.prototype.getTargetElement = function() {\r\n    if (!this.target && this.targetId) {\r\n      this.target = document.getElementById(this.targetId) || document.getElementsByName(this.targetId)[0];\r\n    }\r\n    return this.target;\r\n  };\r\n\r\n  Spy.prototype.getTargetPosition = function() {\r\n    var target = this.getTargetElement();\r\n    if(target) {\r\n      return target.getBoundingClientRect();\r\n    }\r\n  };\r\n\r\n  Spy.prototype.flushTargetCache = function() {\r\n    if(this.targetId) {\r\n      this.target = undefined;\r\n    }\r\n  };\r\n\r\n  return {\r\n    link: function ($scope, $element, $attr) {\r\n      var href = $attr.ngHref || $attr.href;\r\n      var targetId;\r\n\r\n      if (href && href.indexOf('#') !== -1) {\r\n        targetId = href.replace(/.*(?=#[^\\s]+$)/, '').substring(1);\r\n      } else if($attr.duScrollspy) {\r\n        targetId = $attr.duScrollspy;\r\n      } else if($attr.duSmoothScroll) {\r\n        targetId = $attr.duSmoothScroll;\r\n      }\r\n      if(!targetId) return;\r\n\r\n      // Run this in the next execution loop so that the scroll context has a chance\r\n      // to initialize\r\n      var timeoutPromise = $timeout(function() {\r\n        var spy = new Spy(targetId, $scope, $element, -($attr.offset ? parseInt($attr.offset, 10) : duScrollOffset));\r\n        spyAPI.addSpy(spy);\r\n\r\n        $scope.$on('$locationChangeSuccess', spy.flushTargetCache.bind(spy));\r\n        var deregisterOnStateChange = $rootScope.$on('$stateChangeSuccess', spy.flushTargetCache.bind(spy));\r\n        $scope.$on('$destroy', function() {\r\n          spyAPI.removeSpy(spy);\r\n          deregisterOnStateChange();\r\n        });\r\n      }, 0, false);\r\n      $scope.$on('$destroy', function() {$timeout.cancel(timeoutPromise);});\r\n    }\r\n  };\r\n}]);\r\n"],"file":"angular-scroll.js","sourceRoot":"/source/"}